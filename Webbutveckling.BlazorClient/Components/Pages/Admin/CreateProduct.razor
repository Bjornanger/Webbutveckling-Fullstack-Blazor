@page "/CreateProduct"

@using webbutveckling_labb2_Bjornanger.Shared.Interfaces
@using webbutveckling_labb2_Bjornanger.Shared.DTOs
@using webbutveckling_labb2_Bjornanger.Shared.DTOs.ProductDTOs
@inject IProductService<ProductDTO> adminService
@inject ICategoryService<CategoryDTO> adminCategory
@inject IWebHostEnvironment env
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<h3>Admin Product Inventory</h3>



<EditForm Model="newProduct" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="productName">Product Name:</label>
        <InputText id="productName" class="form-control" @bind-Value="newProduct.Name" placeholder="Product name" />
    </div>
    <div>
        <label for="productDescription">Product Description:</label>
        <InputText id="productDescription" class="form-control" @bind-Value="newProduct.Description" placeholder="Description" />
    </div>
    <div>
        <label for="productprice">Product Price:</label>
        <InputNumber id="productprice" class="form-control" @bind-Value="newProduct.Price" placeholder="Price of product"></InputNumber>
    </div>
    <div>
        <label for="productstock">Product Stock:</label>
        <InputNumber id="productstock" class="form-control" @bind-Value="newProduct.Stock" placeholder="Create stock"></InputNumber>
    </div>
    <label>Set Category for Product:</label>
    <InputSelect @bind-Value="newProduct.Category" placeholder="Set Category to Product">
        <option value=""></option>
        @foreach (var category in categoriesFromDb)
        {
            <option value="@category.Id">@category.Name</option>
        }
    </InputSelect>
    <div>
        <label for="productPicture"></label>
        <InputFile id="productPicture" OnChange="@LoadFiles" accept=".png, .jpg, .jpeg" class="form-control" placeholder="Upload picture to your product"></InputFile>
    </div>
    <button class="btn btn-success" type="submit">Create Product</button>"
</EditForm>

<EditForm Model="categoryToAdd" FormName="CreatingCategory" OnValidSubmit="AddCategory">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText id="categoryName" @bind-Value="categoryToAdd.Name" placeholder="New Category"></InputText>
    <button type="submit">Create Category</button>

</EditForm>

@if (errorList.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errorList)
        {
            <li>@error</li>
        }
    </ul>
}

<h3 class="row justify-content-center">Product Inventory</h3>
 <div class="container">
    <div class="row justify-content-md-start">
        <div class="col-md-12">
            <ul class="list-group">
                @foreach (var product in productToShow)
                {
                    var category = categoriesFromDb.FirstOrDefault(c => c.Id == product.Category);
                    var statusText = product.Status ? "In Stock" : "Out of Stock"; 
                    
                    
                    <li class="list-group-item">
                        Name: @product.Name <br />
                        Description: @product.Description <br />
                        Price: $@product.Price <br />
                        Stock: @product.Stock <br />
                        Category: @category!.Name <br />
                        <img src="@product.ImageUrl" alt="Product Image" width="100" height="100" />
                        Status: @statusText
                    </li>
                }
            </ul>

        </div>
    </div>
</div> 


@code {

    //Allt som har med produkter att göra
    private ProductDTO newProduct { get; set; } = new ProductDTO();
    private List<ProductDTO> productToShow { get; set; } = new List<ProductDTO>();




    //Allt med kategorier att göra
    private CategoryDTO categoryToAdd { get; set; } = new CategoryDTO();
    private List<CategoryDTO> categoriesFromDb { get; set; } = new List<CategoryDTO>();



    protected override async Task OnInitializedAsync()
    {
        productToShow.AddRange(await adminService.GetAllAsync());
        categoriesFromDb.AddRange(await adminCategory.GetAllAsync());
    }

    private async void AddCategory()
    {

        if (categoryToAdd is null)
        {
            
            return;
        }

        if (categoriesFromDb.Any(c => c.Name.ToLower() == categoryToAdd.Name.ToLower()))
        {
            await ShowMessage("Category with that name already exist.");
            return;
        }


        await adminCategory.AddAsync(categoryToAdd);
        categoriesFromDb.Clear();
        categoriesFromDb.AddRange(await adminCategory.GetAllAsync());
    }
    

    //Allt med filuppladdning att göra och skapa ny product
    private long maxFileSize = 1024 * 1024 * 3;//filstorlek till max 3MB
    private int maxAllowedFiles = 1;//max antal filer som kan laddas upp
    private List<string> errorList = new List<string>();//lista för att hålla reda på felmeddelanden
    private IBrowserFile? file;
    private async Task SubmitForm()
    {
        if (newProduct is null)
        {
            return;
        }

        try
        {
            string relativePath = await CaptureFile();
            newProduct.ImageUrl = relativePath;
            if (productToShow.Any(c => c.Name.ToLower() == newProduct.Name.ToLower()))
            {
                await ShowMessage("Product with that name already exist.");
                return;
            }
            await adminService.AddAsync(newProduct);
            productToShow.Clear();
            productToShow.AddRange(await adminService.GetAllAsync());
            newProduct = new ProductDTO();//Rensar detta fälten?
            StateHasChanged();

        }
        catch (Exception e)
        {
            errorList.Add($"Error: {e.Message}");
            throw;
        }
    }
    private async Task LoadFiles(InputFileChangeEventArgs fileToUpload)//Metod för att ladda upp filer till mina producter
    {

        file = fileToUpload.File;

    }
    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }

        try
        {
            // Skapar ett unikt namn på filen
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            // Skapar vägen till wwwroot så de ligger i Client istället för API
            string absolutePath = Path.Combine(
                env.WebRootPath,
                "images",
                newFileName);

            
            string relativePath = Path.Combine(
                "images",
                newFileName);

           
            Directory.CreateDirectory(Path.GetDirectoryName(absolutePath));

            //Sparar filen
            await using FileStream fs = new(absolutePath, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception e)
        {
            errorList.Add($"File: {file.Name} Error: {e.Message}");
            throw;
        }
    }

    private async Task ShowMessage(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }




}