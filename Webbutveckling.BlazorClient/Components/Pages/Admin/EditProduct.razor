@page "/EditProduct"
@using webbutveckling_labb2_Bjornanger.Shared.DTOs.ProductDTOs
@using webbutveckling_labb2_Bjornanger.Shared.Interfaces
@using webbutveckling_labb2_Bjornanger.Shared.DTOs
@inject IProductService<ProductDTO> adminService
@inject ICategoryService<CategoryDTO> adminCategory

@rendermode InteractiveServer

<h2>Edit Product</h2>


<div>
    <EditForm Model="productToFind" FormName="SearchForProd" OnValidSubmit="SearchProduct">
        <InputText type="text" @bind-Value="productToFind.Name" placeholder="Search..."></InputText>
        <button type="submit"><i class="fa fa-search"></i></button>
    </EditForm>
</div>


<div class="container">
    <h5>Search for Product</h5>
    <div class="input-group mb-3">
    </div>
    <div class="row">
        @foreach (var product in searchedProduct)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <img class="card-img-top" src="@product.ImageUrl" alt="Product Image">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">Description: @product.Description</p>
                        <p class="card-footer" Price:>@(product.Price) USD</p>
                        <p class="card-footer">Stock: @product.Stock</p>
                        <p class="card-footer">Available: @product.Status</p>
                        <button class="btn btn-outline-danger" type="submit" @onclick="RemoveProduct">Remove</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>





@code
{
    ProductDTO productToFind = new ProductDTO();

    List<ProductDTO> searchedProduct = new List<ProductDTO>();


    List<ProductDTO> showAllProducts = new List<ProductDTO>();



    List<CategoryDTO> categoryToShow = new List<CategoryDTO>();



    protected override async Task OnInitializedAsync()
    {
        showAllProducts.AddRange(await adminService.GetAllAsync());
        categoryToShow.AddRange(await adminCategory.GetAllAsync());
    }


    private async Task SearchProduct()
    {
        if (string.IsNullOrEmpty(productToFind.Name))
        {
            return;
        }

        var prodToSee = showAllProducts.Where(p => p.Name == productToFind.Name);

        searchedProduct.AddRange(prodToSee);
    }

    private async Task RemoveProduct()
    {
        if (productToFind is null)
        {
            return;
        }



        int prodId = productToFind.Id;

        var productToRemove = await adminService.GetByIdAsync(prodId);

        await adminService.DeleteAsync(productToRemove.Id);
        showAllProducts.Remove(productToRemove);
        searchedProduct.Clear();
       

        


    }
}