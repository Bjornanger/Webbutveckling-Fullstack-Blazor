@page "/EditProduct"
@using webbutveckling_labb2_Bjornanger.Shared.DTOs.ProductDTOs
@using webbutveckling_labb2_Bjornanger.Shared.Interfaces
@using webbutveckling_labb2_Bjornanger.Shared.DTOs
@using BootstrapBlazor.Components
@inject IProductService<ProductDTO> adminService
@inject ICategoryService<CategoryDTO> adminCategory

@rendermode InteractiveServer

<h2>Admin Edit Product</h2>
<br />

    <div class="container">
    <div class="row">
        <div>
            <h3>Search for Product</h3>
            <EditForm Model="productToFind" FormName="SearchForProd" OnValidSubmit="SearchProduct">
                <InputText type="text" @bind-Value="productToFind.Name" placeholder="Search..."></InputText>
                <button class="btn btn-info" type="submit"><i class="fa fa-search"></i></button>
            </EditForm>
        </div>
        <div class="col-md-6">

            <div class="container">

                <div class="input-group mb-3">
                </div>
                <div class="row">
                    @foreach (var product in searchedProduct)
                    {
                        <div class="col-md-4 mb-3">
                            <div class="card">
                                <img class="card-img-top" src="@product.ImageUrl" alt="Product Image">
                                <div class="card-body">
                                    <h5 class="card-title">@product.Name</h5>
                                    <p class="card-text">ID: @product.Id</p>
                                    <p class="card-text">Description: @product.Description</p>
                                    <p class="card-footer" Price:>@(product.Price) USD</p>
                                    <p class="card-footer">Stock: @product.Stock</p>
                                    <p class="card-footer">Available: @product.Status</p>

                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <br />


    </div>


   


    <h3>Update Product</h3>
    <label>Search for product to Update</label>
    <EditForm Model="productToFindandUpdate" FormName="SearchForProdToUpdate" OnValidSubmit="SearchProductToUpdate">
        <InputText type="text" @bind-Value="productToFindandUpdate.Name" placeholder="Search..."></InputText>
        <button class="btn btn-info" type="submit"><i class="fa fa-search"></i></button>
    </EditForm>
    <div class="col-md-6">

        <div class="container">
            <h5>Choose which field to update</h5>
            <EditForm Model="productToUpdate" FormName="UpdateProduct" OnValidSubmit="UpdateProduct">
                <label>New name for product:</label><InputText id="prodName" @bind-Value="productToUpdate.Name" placeholder="Update Name"></InputText>
                <br />
                <label>New description for product:</label><InputText id="prodDescription" @bind-Value="productToUpdate.Description" placeholder="Update Description"></InputText>
                <br />
                <label>New price for product:</label><InputNumber id="prodPrice" @bind-Value="productToUpdate.Price" placeholder="Update price">Update Price</InputNumber>
                <br />
                <label>Change stock amount for product:</label><InputNumber id="prodStock" @bind-Value="productToUpdate.Stock" placeholder="Update stock">Update Stock</InputNumber>
                <br />
                <label>Change category for product:</label><InputSelect @bind-Value="productToUpdate.Category" placeholder="Set Category to Product">
                    New Category
                    <option value=""></option>
                    @foreach (var category in categoryToShow)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <br />
                <button class="btn btn-outline-success" type="submit">Update</button>
            </EditForm>
            <EditForm Model="productToFindandUpdate" FormName="ChangeStatus" OnValidSubmit="ChangeStatus">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="availabilitySwitch" @bind="productToUpdate.Status" />
                    <label class="form-check-label" for="availabilitySwitch">@GetStatusLabel()</label>
                    <br/>
                    <button class="btn btn-outline-success" type="submit">Change Status</button>
                </div>

            </EditForm>
        </div>
    </div>
</div>



<div class="container">
    <label>Remove product from database</label>
    <EditForm Model="productToRemove" FormName="RemoveProduct" OnValidSubmit="RemoveProduct">
        <InputNumber @bind-Value="productToRemove.Id " placeholder="Remove product from Database"></InputNumber>
        <button class="btn btn-outline-danger" type="submit">Remove Product</button>
    </EditForm>
</div>








@code
{
    ProductDTO productToFindandUpdate { get; set; } = new ProductDTO();
    ProductDTO productToUpdate { get; set; } = new ProductDTO();
    List<ProductDTO> searchedProductToUpdate = new List<ProductDTO>();

    ProductDTO productToFind { get; set; } = new ProductDTO();
    List<ProductDTO> searchedProduct = new List<ProductDTO>();
    ProductDTO productToRemove { get; set; } = new ProductDTO();


    List<ProductDTO> showAllProducts = new List<ProductDTO>();
    List<CategoryDTO> categoryToShow = new List<CategoryDTO>();



    protected override async Task OnInitializedAsync()
    {
        showAllProducts.AddRange(await adminService.GetAllAsync());
        categoryToShow.AddRange(await adminCategory.GetAllAsync());
    }


    private async Task SearchProduct()
    {
        if (string.IsNullOrEmpty(productToFind.Name))
        {
            return;
        }

        var prodToSee = showAllProducts.Where(p => p.Name == productToFind.Name);
        
        searchedProduct.AddRange(prodToSee);
    }

    private async Task RemoveProduct()
    {
        if (searchedProduct is null)
        {
            return;
        }

        var prodFromList = searchedProduct.FirstOrDefault(p => p.Id == productToRemove.Id);

        if (prodFromList is null)
        {
            return;
        }

        await adminService.DeleteAsync(prodFromList.Id);


        searchedProduct.Clear();
        showAllProducts.Clear();
        showAllProducts.AddRange(await adminService.GetAllAsync());



    }

    private async Task UpdateProduct()
    {
        if (productToFindandUpdate is null)
        {
            return;
        }

        var findProdInDB = adminService.GetByIdAsync(productToFindandUpdate.Id);
        
        ProductDTO prodToShow = await adminService.UpdateAsync(productToFindandUpdate, findProdInDB.Id);

        searchedProductToUpdate.Clear();
        searchedProductToUpdate.Add(prodToShow);
    }

    private async Task SearchProductToUpdate()
    {
        if (string.IsNullOrEmpty(productToFindandUpdate.Name))
        {
            return;
        }

        var prodToSee = showAllProducts.Where(p => p.Name == productToFindandUpdate.Name);

        searchedProductToUpdate.AddRange(prodToSee);
    }

    private async Task ChangeStatus()
    {
        if (productToFindandUpdate.Id == null)
        {
            return;
        }
        await adminService.UpdateStatusOnProductAsync(productToFindandUpdate.Id);

    }

    private string GetStatusLabel()
    {
        return productToFindandUpdate.Status ? "In stock" : "Out of stock";
    }
}


