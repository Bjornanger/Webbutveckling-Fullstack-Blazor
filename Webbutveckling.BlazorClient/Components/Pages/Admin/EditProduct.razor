@page "/EditProduct"
@using webbutveckling_labb2_Bjornanger.Shared.DTOs.ProductDTOs
@using webbutveckling_labb2_Bjornanger.Shared.Interfaces
@using webbutveckling_labb2_Bjornanger.Shared.DTOs
@using BootstrapBlazor.Components
@inject IProductService<ProductDTO> adminService
@inject ICategoryService<CategoryDTO> adminCategory

@rendermode InteractiveServer

<h2>Admin Edit Product</h2>
<br />



<div class="container">
    <div class="row">
        
        <div class="col-md-6">
            <h3>Search for Product</h3>
            <EditForm Model="productToFind" FormName="SearchForProd" OnValidSubmit="SearchProduct">
                <InputText type="text" @bind-Value="productToFind.Name" placeholder="Search..."></InputText>
                <button class="btn btn-info" type="submit"><i class="fa fa-search"></i></button>
            </EditForm>

            <div class="row">
                @foreach (var product in searchedProduct)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <img class="card-img-top" src="@product.ImageUrl" alt="Product Image">
                            <div class="card-body">
                                <h5 class="card-title">@product.Name</h5>
                                <p class="card-text">ID: @product.Id</p>
                                <p class="card-text">Description: @product.Description</p>
                                <p class="card-footer"> Price: @(product.Price) USD</p>
                                <p class="card-footer"> Category: @product.Category</p>
                                <p class="card-footer">Stock: @product.Stock</p>
                                <p class="card-footer">Available: @product.Status</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

       
        <div class="col-md-6">
            <h3>Update Product</h3>

            <div class="container">
                <h5>Choose which field to update</h5>
                <label>Search for product to Update</label>
                <InputNumber @bind-Value="searchedId.Id" placeholder="Search by product Id.." />
                <button class="btn btn-primary" @onclick="SearchProductToUpdate">Search</button>
                <EditForm Model="productToUpdate" FormName="UpdateProduct" OnValidSubmit="UpdateProduct">
                    <br />
                    <label>ID on Product to change:</label><InputNumber id="prodId" @bind-Value="productToUpdate.Id" readonly />
                    <label>New name for product:</label><InputText id="prodName" @bind-Value="productToUpdate.Name" placeholder="Update Name"></InputText>
                    <br />
                    <label>New description for product:</label><InputText id="prodDescription" @bind-Value="productToUpdate.Description" placeholder="Update Description"></InputText>
                    <br />
                    <label>New price for product:</label><InputNumber id="prodPrice" @bind-Value="productToUpdate.Price" placeholder="Update price">Update Price</InputNumber>
                    <br />
                    <label>Change stock amount for product:</label><InputNumber id="prodStock" @bind-Value="productToUpdate.Stock" placeholder="Update stock">Update Stock</InputNumber>
                    <br />
                    <label>Change category for product:</label>
                    <InputSelect @bind-Value="productToUpdate.Category" placeholder="Set Category to Product">
                        New Category
                        <option value=""></option>
                        @foreach (var category in categoryToShow)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                    <br />
                    <button type="button" class="btn btn-outline-warning" @onclick="ChangeStatus">@statusLabel</button>
                    <label class="form-check-label" for="availabilitySwitch">@statusLabel</label>
                    <br />
                    <button class="btn btn-outline-success" type="submit">Update</button>
                </EditForm>
               
               
            </div>
        </div>
    </div>
</div>








@code
{
    
    ProductDTO productToUpdate { get; set; } = new ProductDTO();
    
    private bool isStatusAvailable = true;
    private string statusLabel => isStatusAvailable ? "Available" : "Out of Stock";
    ProductDTO searchedId { get; set; } = new ProductDTO();
    


    ProductDTO productToFind { get; set; } = new ProductDTO();
    List<ProductDTO> searchedProduct = new List<ProductDTO>();
    ProductDTO productToRemove { get; set; } = new ProductDTO();


    List<ProductDTO> showAllProducts = new List<ProductDTO>();
    List<CategoryDTO> categoryToShow = new List<CategoryDTO>();



    protected override async Task OnInitializedAsync()
    {
        showAllProducts.AddRange(await adminService.GetAllAsync());
        categoryToShow.AddRange(await adminCategory.GetAllAsync());
    }


    private async Task SearchProduct()
    {
        if (string.IsNullOrEmpty(productToFind.Name))
        {
            return;
        }

        var prodToSee = showAllProducts.Where(p => p.Name == productToFind.Name);

        searchedProduct.AddRange(prodToSee);
    }

    private async Task RemoveProduct()
    {
        if (searchedProduct is null)
        {
            return;
        }

        var prodFromList = searchedProduct.FirstOrDefault(p => p.Id == productToRemove.Id);

        if (prodFromList is null)
        {
            return;
        }

        await adminService.DeleteAsync(prodFromList.Id);


        searchedProduct.Clear();
        showAllProducts.Clear();
        showAllProducts.AddRange(await adminService.GetAllAsync());
    }

    private async Task UpdateProduct()
    {
        if (productToUpdate.Id == null)
        {
            return;
        }

        if (productToUpdate.Category == null)
        {
            return;
        }
       

        await adminService.UpdateAsync(productToUpdate, productToUpdate.Id);

        searchedProduct.Clear();
        showAllProducts.Clear();
        showAllProducts.AddRange(await adminService.GetAllAsync());
    }

    private async Task SearchProductToUpdate()
    {
        if (searchedId == null)
        {
            return;
        }

        
        var product = await adminService.GetByIdAsync(searchedId.Id);

        var updatedProduct = showAllProducts.FirstOrDefault(p => p.Id == product.Id);
         productToUpdate = new ProductDTO
            {
                Id = updatedProduct.Id,
                Name = updatedProduct.Name,
                Description = updatedProduct.Description,
                Price = updatedProduct.Price,
                Category = updatedProduct.Category,
                ImageUrl = updatedProduct.ImageUrl,
                Stock = updatedProduct.Stock,
                Status = updatedProduct.Status

            };
            
        

    }

    private void ChangeStatus()
    {
        productToUpdate.Status = !productToUpdate.Status;
        isStatusAvailable = !isStatusAvailable;
        
    }
    

    
}


