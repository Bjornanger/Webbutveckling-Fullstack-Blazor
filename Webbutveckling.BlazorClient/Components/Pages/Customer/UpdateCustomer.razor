@page "/UpdateCustomer"
@using webbutveckling_labb2_Bjornanger.Shared.DTOs.UserDTOs
@using webbutveckling_labb2_Bjornanger.Shared.Interfaces

@inject ICustomerService<CustomerDTO> customerService
@inject IContactInfoService<ContactInfoDTO> contactInfoService

@rendermode InteractiveServer


<h3>Update your Contact Information:</h3>

<div class="container">
    <div class="col-md">
        <h3>Choose your profile by Searching for you Email address here:</h3>
        <EditForm Model="searchCustomer" FormName="SearchCustomer" OnSubmit="SearchForCustomer">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputText class="form-control" @bind-Value="searchCustomer.Email" placeholder="Enter your Email"></InputText>
            <button type="submit">Search</button>
        </EditForm>
    </div>




    <EditForm Model="customerToChange" FormName="UpdateCustomerInfo" OnValidSubmit="UpdateCustomerInfo">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label>Firstname:</label>
        <InputText class="form-control" id="CustomerFirstname" @bind-Value="customerToChange.FirstName" readonly></InputText><br />
        <label>Lastname:</label>
        <InputText class="form-control" id="CustomerLastname" @bind-Value="customerToChange.LastName" readonly></InputText><br />
        <label>Update your Phone number:</label>
        <InputText class="form-control" id="" @bind-Value="customerToChange.Email" readonly>This is your Email</InputText><br />
        <label>Update your Password:</label>
        <InputText class="form-control" id="" @bind-Value="customerToChange.Password" readonly>This is your Password</InputText><br />
        <label>Update your Phone number:</label>
        <InputText class="form-control" id="" @bind-Value="customerToChange.ContactInfo.Phone">Enter New Phone Number</InputText><br />
        <label>Update your Address:</label>
        <InputText class="form-control" id="" @bind-Value="customerToChange.ContactInfo.Address">Enter New Address</InputText><br />
        <label>Update your City:</label>
        <InputText class="form-control" id="" @bind-Value="customerToChange.ContactInfo.City">Enter New City</InputText><br />
        <label>Update your Zip code:</label>
        <InputText class="form-control" id="" @bind-Value="customerToChange.ContactInfo.ZipCode">Enter New Zip code</InputText><br />
        <label>Update your Region:</label>
        <InputText class="form-control" id="" @bind-Value="customerToChange.ContactInfo.Region">Enter New Region</InputText><br />
        <label>Update your Country:</label>
        <InputText class="form-control" id="" @bind-Value="customerToChange.ContactInfo.Country">Enter New Country</InputText><br />

        <button type="submit" class="btn btn-success">Update</button>

    </EditForm>
</div>




@code {


    public CustomerDTO searchCustomer { get; set; } = new CustomerDTO();
    public ContactInfoDTO ContactInfoToUpdate { get; set; } = new ContactInfoDTO();

    public List<CustomerDTO> updatedCustomer { get; set; } = new();
    public List<CustomerDTO> allCustomers { get; set; } = new();


    public CustomerDTO customerToChange { get; set; } = new CustomerDTO();

   



    protected async override Task OnInitializedAsync()
    {
        allCustomers.AddRange(await customerService.GetAllAsync());
    }


    private async Task SearchForCustomer()
    {
        if (string.IsNullOrEmpty(searchCustomer.Email))
        {
            return;
        }

        var customer = allCustomers.FirstOrDefault(c => c.Email == searchCustomer.Email);

        if (customer is null)
        {
            return;
        }


        customerToChange = new CustomerDTO
            {
                Id = customer.Id,
                FirstName = customer.FirstName,
                LastName = customer.LastName,
                Email = customer.Email,
                Password = customer.Password,
                ContactInfo = new ContactInfoDTO
                {
                    Id = customer.ContactInfo.Id,
                    Phone = customer.ContactInfo.Phone,
                    Address = customer.ContactInfo.Address,
                    ZipCode = customer.ContactInfo.ZipCode,
                    City = customer.ContactInfo.City,
                    Region = customer.ContactInfo.Region,
                    Country = customer.ContactInfo.Country
                },
                Orders = null!,
                Cart = null!
            };



    }

    private async Task UpdateCustomerInfo()
    {
        if (customerToChange.Id == null)
        {
            return;
        }

        var customerToUpdate = allCustomers.FirstOrDefault(c => c.Id == customerToChange.Id);

        ContactInfoToUpdate = new ContactInfoDTO
            {
                Id = customerToChange.ContactInfo.Id,
                Phone = customerToChange.ContactInfo.Phone,
                Address = customerToChange.ContactInfo.Address,
                ZipCode = customerToChange.ContactInfo.ZipCode,
                City = customerToChange.ContactInfo.City,
                Region = customerToChange.ContactInfo.Region,
                Country = customerToChange.ContactInfo.Country
            };


        await contactInfoService.UpdateCustomerInfo(customerToUpdate.Id, ContactInfoToUpdate);
        allCustomers.Clear();
        allCustomers.AddRange(await customerService.GetAllAsync());
    }

  

}